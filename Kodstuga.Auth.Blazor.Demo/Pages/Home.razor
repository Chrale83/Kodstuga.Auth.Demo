@page "/"
@using Kodstuga.Auth.Blazor.Demo.Dtos
@using Kodstuga.Auth.Blazor.Demo.Events
@inject IHttpClientFactory HttpClientFactory;
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

<form>
    <input type="email" placeholder="username" @bind="_username" />
    <input type="password" placeholder="password" @bind="_password"/>
    <button type="button" @onclick="LoginAsync">log in</button>
    <button type="button" @onclick="RegisterAsync">register</button>
    <button type="button" @onclick="RegisterAdminAsync">register admin</button>
    <button type="button" @onclick="LogoutAsync">Logout</button>
</form>
<p>@_error</p>



<AuthorizeView>
    <button type="button" @onclick="GetAnimalsAsync">GetAllAnimals</button>
    <ul>
        @foreach (var animal in _animals)
        {
            <li>ID: @animal.Id, Type: @animal.Type, Name: @animal.Name, Sound: @animal.Sound</li>
        }
    </ul>
</AuthorizeView>

@code
{
    private HttpClient _httpClient;
    private string _username = "";
    private string _password = "";
    private string _error = "";
    private List<AnimalDto> _animals = new();
    private readonly AnimalDto _addAnimal = new();

    protected override void OnInitialized()
    {
        _httpClient = HttpClientFactory.CreateClient("backend");
        base.OnInitialized();
    }

    private async Task LoginAsync()
    {
        var response = await _httpClient.PostAsJsonAsync("login", new
        {
            Email = _username,
            Password = _password
        });

        if (!response.IsSuccessStatusCode)
        {
            _error = "Couldnt log in because of reasons";
            return;
        }

        var data = await response.Content.ReadFromJsonAsync<LoginResponseDto>();
        await LocalStorage.SetItemAsStringAsync("authToken", data.AccessToken);
        _username = "";
        _password = "";

        await AuthPublisher.OnAuthenticationStateChange();
    }
    private async Task LogoutAsync()
    {
        await LocalStorage.RemoveItemAsync("authToken");

        await AuthPublisher.OnAuthenticationStateChange();
    }
    private async Task RegisterAsync()
    {
        var response = await _httpClient.PostAsJsonAsync("register", new
        {
            Email = _username,
            Password = _password
        });

        if (!response.IsSuccessStatusCode)
        {
            _error = "Couldnt register because of reasons";
            return;
        }

        _username = "";
        _password = "";
    }
    private async Task RegisterAdminAsync()
    {
        var response = await _httpClient.PostAsJsonAsync("register-admin", new
        {
            Email = _username,
            Password = _password
        });

        if (!response.IsSuccessStatusCode)
        {
            _error = "Couldnt register because of reasons";
            return;
        }

        _username = "";
        _password = "";
    }

    private async Task GetAnimalsAsync()
    {
        var response = await _httpClient.GetAsync("api/animals");

        if (!response.IsSuccessStatusCode)
        {
            _error = "Could not get animals because of reasons";
        }

        _animals = await response.Content.ReadFromJsonAsync<List<AnimalDto>>() ?? [];
    }

}
